AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BaseName:
    Type: String
  StageName:
    Type: String
  HostedZoneId:
    Type: String
  HostedZoneDomain:
    Type: String
  ApiHostedZoneId:
    Type: String
  APICertificateArn:
    Type: String
  FacebookAppId:
    Type: String
  FacebookAppSecret:
    Type: String

Conditions:
  CreateRecordSet: !Not [!Equals [!Ref StageName, testing]]

Resources:
  ApiIndexPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-api-index
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetUserProfilePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-get-user-profile
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetStoryProfilePermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-get-story-profile
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetLatestStoriesPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-get-latest-stories
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetStoryChaptersPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-get-story-chapters
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  GetChapterContentPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BaseName}-${StageName}-get-chapter-content
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: RestApi
          - "/*"

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${BaseName}-${StageName}-api
      BodyS3Location:
        Bucket: !Sub bukium-backend-artifacts-${AWS::Region}
        Key: !Sub oas/v1-${StageName}-{{ timestamp }}.yml

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref APICertificateArn
      DomainName: !Sub ${StageName}-api.${HostedZoneDomain}

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref RestApi

  ApiCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiCloudWatchLogsRole
        - Arn

  ApiDeployment{{ timestamp }}: # {{ timestamp }} gets replaced during the build stage of the pipeline. See buildspec.yml
    DependsOn:
      - RestApi
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: RestApi

  ApiStage:
    DependsOn:
      - ApiAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      RestApiId:
        Ref: RestApi
      DeploymentId:
        Ref: ApiDeployment{{ timestamp }} # {{ timestamp }} gets replaced during the build stage of the pipeline. See buildspec.yml
      MethodSettings:
        - LoggingLevel: INFO
          HttpMethod: "*"
          DataTraceEnabled: true
          ResourcePath: "/*"
          CachingEnabled: true
          CacheTtlInSeconds: 60
          MetricsEnabled: true

  ApiRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: CreateRecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.DistributionDomainName
        HostedZoneId: !GetAtt ApiDomainName.DistributionHostedZoneId
      Name: !Sub ${StageName}-api.${HostedZoneDomain}
      HostedZoneId: !Ref HostedZoneId
      Type: A
